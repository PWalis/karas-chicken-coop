// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model products {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  priceInCents Int
  category    categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  Int 
  inventory   inventory? 
  primaryImage String
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model categories {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  product     products[] 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model inventory {
  id          Int      @id @default(autoincrement())
  productId   Int      @unique
  product     products? @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int
  hasSizes    Boolean
  xs_quantity    Int  @default(0)
  s_quantity     Int  @default(0)
  m_quantity     Int  @default(0)
  l_quantity     Int  @default(0)
  xl_quantity    Int  @default(0)
  xxl_quantity   Int  @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model order {
  id         String      @id @default(uuid())
  name       String
  address    String
  city       String
  state      String
  zip        String
  status     OrderStatus @default(PENDING)
  paymentIntentId String
  orderItems orderItem[]
  createdAt  DateTime    @default(now())
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSED
  FULFILLED
  DELIVERED
  CANCELED
}

model orderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  productId Int
  hasSizes  Boolean
  size      String
  orderId   String
  order     order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model user {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  salt      String
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Email {
  id  String @id @default(uuid())
  email  String
  createdAt DateTime @default(now())
}